apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-default-backend
spec:
  selector:
    matchLabels:
      app: ingress-default-backend
  replicas: 2
  template:
    metadata:
      labels:
        app: ingress-default-backend
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: ingress-default-backend
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ingress-default-backend
            topologyKey: kubernetes.io/hostname
      containers:
      - name: ingress-default-backend
        image: paskalmaksim/ingress-default-backend:<someversion>
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m  
            memory: 100Mi
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-default-backend
  labels:
    app: ingress-default-backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: ingress-default-backend
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: ingress-default-backend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ingress-default-backend